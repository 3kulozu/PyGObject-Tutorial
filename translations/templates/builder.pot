# SOME DESCRIPTIVE TITLE.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-08-10 09:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/builder.txt:2
# 28ca3c75cdb340899b12cf47418fc71e
msgid "Glade and Gtk.Builder"
msgstr ""

#: ../source/builder.txt:3
# 06669688aeb5443b83473f575003f826
msgid "The :class:`Gtk.Builder` class offers you the opportunity to design user interfaces without writing a single line of code. This is possible through describing the interface by a XML file and then loading the XML description at runtime and create the objects automatically, which the Builder class does for you. For the purpose of not needing to write the XML manually the `Glade <http://glade.gnome.org/>`_ application  lets you create the user interface in a WYSIWYG (what you see is what you get) manner"
msgstr ""

#: ../source/builder.txt:7
# 2cec3b59c96542f19eb496b1fbc15fa4
msgid "This method has several advantages:"
msgstr ""

#: ../source/builder.txt:9
# 2dac0f84567b48e1afb79bb691ac3cdf
msgid "Less code needs to be written."
msgstr ""

#: ../source/builder.txt:10
# 77ad0d8c916c4325a64d2a8bbb6c775e
msgid "UI changes can be seen more quickly, so UIs are able to improve."
msgstr ""

#: ../source/builder.txt:11
# 8b1060046ae740dcb49a4401be2959c0
msgid "Designers without programming skills can create and edit UIs."
msgstr ""

#: ../source/builder.txt:12
# 8095890fb54447d4957981358c082f1e
msgid "The description of the user interface is independent from the programming language being used."
msgstr ""

#: ../source/builder.txt:14
# aff51f4bc9324ac38bc9922e4f1d8efa
msgid "There is still code required for handling interface changes triggered by the user, but :class:`Gtk.Builder` allows you to focus on implementing that functionality."
msgstr ""

#: ../source/builder.txt:17
# bf38dacf70354936a1acb487a9f3ce8f
msgid "Creating and loading the .glade file"
msgstr ""

#: ../source/builder.txt:18
# 0ec8abf6b3d34ef7937f96d237f413bd
msgid "First of all you have to download and install Glade. There are `several tutorials <https://live.gnome.org/Glade/Tutorials>`_ about Glade, so this is not explained here in detail. Let's start by creating a window with a button in it and saving it to a file named *example.glade*. The resulting XML file should look like this."
msgstr ""

#: ../source/builder.txt:42
# a2b0403ac7624dfa921ee8de8e612d30
msgid "To load this file in Python we need a :class:`Gtk.Builder` object."
msgstr ""

#: ../source/builder.txt:49
# d01b99680c3a45479b03f9bb78413144
msgid "The second line loads all objects defined in *example.glade* into the Builder object."
msgstr ""

#: ../source/builder.txt:51
# 3495170aedf645e4bc9cfac39ce347ac
msgid "It is also possible to load only some of the objects. The following line would add only the objects (and their child objects) given in the tuple."
msgstr ""

#: ../source/builder.txt:58
# bb75873dc7e549248fe07849a978725c
msgid "These two methods exist also for loading from a string rather than a file. Their corresponding names are :meth:`Gtk.Builder.add_from_string` and :meth:`Gtk.Builder.add_objects_from_string` and they simply take a XML string instead of a file name."
msgstr ""

#: ../source/builder.txt:62
# b3e5ad3b88d446fdaa9ea73edf9b6669
msgid "Accessing widgets"
msgstr ""

#: ../source/builder.txt:63
# 80c841df300f4ab8abcbf0ed26c7e21c
msgid "Now that the window and the button are loaded we also want to show them. Therefore the :meth:`Gtk.Window.show_all` method has to be called on the window. But how do we access the associated object?"
msgstr ""

#: ../source/builder.txt:72
# 1a305b730d0a4f6d88f800d8ab8977be
msgid "Every widget can be retrieved from the builder by the :meth:`Gtk.Builder.get_object` method and the widget's *id*. It is really *that* simple."
msgstr ""

#: ../source/builder.txt:75
# 54a79d0b126d44d4a1465c4dd6d71deb
msgid "It is also possible to get a list of all objects with"
msgstr ""

#: ../source/builder.txt:82
# 65625b20737a41f59db984a84619bea9
msgid "Connecting Signals"
msgstr ""

#: ../source/builder.txt:83
# 7eed47e6ca894168ada4bcbca8cae77a
msgid "Glade also makes it possible to define signals which you can connect to handlers in your code without extracting every object from the builder and connecting to the signals manually. The first thing to do is to declare the signal names in Glade. For this example we will act when the window should be closed and when the button was pressed, so we give the name \"onDeleteWindow\" to the \"delete-event\" signal of the window and \"onButtonPressed\" to the \"pressed\" signal of the button. Now the XML file should look like this."
msgstr ""

#: ../source/builder.txt:91
# 9292eb192ff04954b42717db41a59f19
msgid "Now we have to define the handler functions in our code. The *onDeleteWindow* should simply result in a call to :meth:`Gtk.main_quit`. When the button is pressed we would like to print the string \"Hello World!\", so we define the handler as follows"
msgstr ""

#: ../source/builder.txt:100
# aaa14cd878c443ef9febfd0f0296fac2
msgid "Next, we have to connect the signals and the handler functions. The easiest way to do this is to define a *dict* with a mapping from the names to the handlers and then pass it to the :meth:`Gtk.Builder.connect_signals` method."
msgstr ""

#: ../source/builder.txt:111
# b0dfdd3bbba04ee2be94223d595bd7c3
msgid "An alternative approach is to create a class which has methods that are called like the signals. In our example the last code snippet could be rewritten as:"
msgstr ""

#: ../source/builder.txt:119
# 2d948c1b5bee41cb8140352b5cc584b7
msgid "Builder Objects"
msgstr ""

#: ../source/builder.txt:124
# ed80c5d9620446f9aed172c913f2fc57
msgid "Loads and parses the given file and merges it with the current contents of builder."
msgstr ""

#: ../source/builder.txt:128
# 2cda72ebc85f41dcbcf878778a9833a1
msgid "Parses the given string and merges it with the current contents of builder.."
msgstr ""

#: ../source/builder.txt:132
# 053061f497514ab58661abde222d53b7
msgid "Same as :meth:`Gtk.Builder.add_from_file`, but loads only the objects with the ids given in the *object_ids* list."
msgstr ""

#: ../source/builder.txt:136
# dae942bfeff34bcd9cb423ae922828a0
msgid "Same as :meth:`Gtk.Builder.add_from_string`, but loads only the objects with the ids given in the *object_ids* list."
msgstr ""

#: ../source/builder.txt:140
# 3243bb7f31034ef9bd770607537088ec
msgid "Retrieves the widget with the id *object_id* from the loaded objects in the builder."
msgstr ""

#: ../source/builder.txt:144
# ebb26787b6934b34a70d87efff20c5e3
msgid "Returns all loaded objects."
msgstr ""

#: ../source/builder.txt:148
# e9a126ca6c934e2e853cc06e84f6a09d
msgid "Connects the signals to the methods given in the *handler_object*. The *handler_object* can be any object which contains keys or attributes that are called like the signal handler names given in the interface description, e.g. a class or a dict."
msgstr ""

#: ../source/builder.txt:152
# 0e4cf26d6bba4ec0bdd4f7caded78cf2
msgid "Example"
msgstr ""

#: ../source/builder.txt:153
# e467a8fa24734891b413c05913455413
msgid "The final code of the example"
msgstr ""

